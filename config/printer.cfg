# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design Trident 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Leadscrew Rotation Distance          [stepper_z], [stepper_z1], [stepper_z2]
## Z Endstop Switch location            [safe_z_home] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Macro settings 
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

[gcode_macro configvars]
#------------------------------------------------- EUCLID PROBE -------------------------------------------------- 
variable_EuclidX: 35                   # X Position directly over probe
variable_EuclidY: 246.5                # Y Position directly over probe
variable_EuclidStowY: 244
variable_EuclidApproachY: 225
variable_EuclidSwipeX: 100             # X Position, swipe to the side to free probe of dock
variable_EuclidSafeZ: 25               # Z Safe height for deployment approach
#variable_EuclidSafeStowZ: 25           # Z Safe height following stowing the probe (break mag pull)
#variable_EuclidDeployZ: 2.5            # Lower to just above probe, no physical contact
#variable_EuclidStowZ: 2.0              # Lower to exact postion for dock entry/exit

#------------------------------------------------ Z COMPENSATION ------------------------------------------------- 
variable_EuclidZCompensation: 5.47     # Z0 Compensation based off probe height, used in G3201. 0 to disable.
                                       # G3201 Description and usage below, ~line 110
                                       # Prusa smooth sheet = 5.41
                                       # Standard textured sheet = 5.45
                                       # Muller Tech: 5.39

variable_ProbeBoundingBox: 20          # Bounding box size to take probe samples, this is used for X & Y
variable_DoApplyMesh: True             # Apply mesh prior to probe sampling, for Z Compensation
variable_MeshToApply: "HOTMESH"        # The saved mesh to apply, mesh name must be enclosed with "". The bundled HOTMESH
                                       # macro will save it's results as "HOTMESH"
                                       # *!* To perform a fresh in-situation mesh calibration, instead of loading a saved
                                       # mesh, use "INSITU" for MeshToApply. This will be applied before Z Comp probing.
                                       # *!* To completely skip applying mesh, use "NONE" for MeshToApply

variable_ZprobeSpeed: 5.0              # Probing speed for Z Measurements
variable_ZprobeSamples: 7              # Samples probed per position, yeilding as calculated median. Keep this number odd e.g. 3,5,7...
variable_ZprobeTolerance: 0.050        # Sample Tolerance per Z Point
variable_ZprobeAbortTolerance: 1.0     # Tolerance to apply the Measured Z-0 Point or throw an error to check things
variable_ZprobeRetract: 1.5            # Retract from each probing for a D2F-5 1.2 should be good                                       

#----------------------------------------------- PRESSURE ADVANCE ------------------------------------------------ 
variable_PressureAdvance: 0.035        # Pressure Advance
variable_PressureAdvanceST: 0.030      # Pressure Advance Smooth Time

#------------------------------------------------- RETRACTIONS --------------------------------------------------- 
variable_PurgeRetract: 0.1             # After completing purgeline, how much retraction to perform (Not normally needed)
variable_EndRetract: 7.0               # After print has completed, how much retraction to perform

#---------------------------------------------- HEATSOAK & COOLING -----------------------------------------------
variable_QGLbeforeSoakMesh: True       # (True/False) Perfrom QGL before applying heat soak for HOTMESH 
variable_QGLbeforeSoakPrint: False      # (True/False) Perfrom QGL before applying heat soak for PRINT
variable_HotmeshSoakMinutes: 15        # Minutes to heat-soak prior to running mesh
variable_PrePrintSoakMinutes: 0       # Minutes to heat-soak prior to printing
variable_InsituMeshSoakMinutes: 15     # Minutes to heat-soak prior to performing an insitu mesh (in addition to PrePrintSoak)
variable_PostPrintCool: 1              # Post-Print cooling to prevent nozzle string, minutes of cooling
variable_PostPrintParkCool: 2          # Once parks, minutes of cooling

#------------------------------------------- PRINTING MOTOR CURRENTS --------------------------------------------- 
variable_PrintCurrentXY: 1.1           # Steppermotor current to be used while printing
variable_PrintCurrentZ: 0.8            # Steppermotor current to be used while printing

#--------------------------------------------- DEFAULT TEMPERATURES ---------------------------------------------- 
variable_defaultTempNozzle: 250        # The default Nozzle Extruding temperature if none is specified
variable_defaultWarmNozzle: 160        # The default Nozzle Warming temperature if none is specified
variable_defaultTempBed: 110           # The default Bed temperature if none is specified
gcode:
#                          !  !  !  !  Klipper Configuration starts ~line 180  !  !  !  ! 

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_490034001650324E31333220-if00
restart_method: command
##--------------------------------------------------------------------

[mcu can_th]
# run the following command to locate the uuid and replace below   ~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0
canbus_uuid: e100bf5ed448

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 5300             #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0


[virtual_sdcard]
path: ~/gcode_files

[force_move]
enable_force_move: true

[display_status]
# For mainsail

[pause_resume]
# For mainsail

[respond]
default_type: echo

[idle_timeout]
timeout: 3600

[exclude_object]

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: can_th:PB6
position_min: 0
position_endstop: 250
position_max: 250


##--------------------------------------------------------------------
homing_speed: 100   #Max 100
homing_retract_dist: 5
homing_retract_speed: 25
second_homing_speed: 10
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG10
position_min: 0
position_endstop: 250
position_max: 250


##--------------------------------------------------------------------
homing_speed: 100  #Max 100
homing_retract_dist: 5
homing_retract_speed: 25
second_homing_speed: 10
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
 
#####################################################################
#   Z Stepper Settings
#####################################################################

##  Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4    
microsteps: 32
endstop_pin: PG11
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
## All builds use same Max Z
position_max: 250
position_min: -2.5
homing_speed: 10.0 # Leadscrews are slower than 2.4, 10 is a recommended max.
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Center
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: PC1
enable_pin: !PA0
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4  
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Front Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 4  
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: False
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: can_th:PD0
dir_pin: can_th:PD1
enable_pin: !can_th:PD2
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.62287001155
gear_ratio: 50:10
microsteps: 32
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: can_th:PB13
sensor_type: Generic 3950
sensor_pin: can_th:PA3
min_temp: 10
max_temp: 270
max_power: 1.0
min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
pressure_advance: 0.035
pressure_advance_smooth_time: 0.030


[tmc2209 extruder]
uart_pin: can_th:PA15
interpolate: false
run_current: 0.65
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
heater_pin: PA3
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
max_power: 1
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#   Euclid Probe
#####################################################################

[probe]
pin: ^can_th:PB5
x_offset: 0
y_offset: 25.0
z_offset: 4.69
speed: 4.0
lift_speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 1.5
samples_tolerance: 0.0075
samples_tolerance_retries: 3

#####################################################################
#   Accelerometer
#####################################################################
[adxl345]
cs_pin: can_th:PB12
spi_software_sclk_pin: can_th:PB10
spi_software_mosi_pin: can_th:PB11
spi_software_miso_pin: can_th:PB2
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    125, 125, 20  # an example

[input_shaper]
#shaper_freq_x: 110.6
#shaper_type_x: 3hump_ei
#shaper_freq_y: 47.0
#shaper_type_y: ei

#####################################################################
#   Fan Control
#####################################################################

[fan]
##  Print Cooling Fan - FAN0
pin: can_th:PA1
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]
##  Hotend Fan - FAN1
pin: can_th:PA0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[controller_fan controller_fan]
##  Controller fan - FAN2
pin: PD12
kick_start_time: 0.5
max_power: 0.3
heater: heater_bed

#[heater_fan exhaust_fan]
##  Exhaust fan - FAN3
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#####################################################################
#   LED Control
#####################################################################

#[output_pin caselight]
# Chamber Lighting - HE2 Connector (Optional)
#pin: PB10
#pwm:true
#shutdown_value: 0
#value:1
#cycle_time: 0.01

## RGBW double-check if it's not duplicated with stealthburner_leds.cfg
[neopixel sb_leds]
pin: can_th:PD3
chain_count: 3
color_order: GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.1
initial_WHITE: 0.0

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position:143,250
speed:100
z_hop:10

[z_tilt]
##  Use Z_TILT_ADJUST to level the bed .
##  z_positions: Location of toolhead

z_positions:
    -50, 18
    125, 298
    300, 18
points:
    30, 5
    125, 195
    220, 5

speed: 200
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075

#####################################################################
#   Bed Mesh
#####################################################################

[bed_mesh]
speed: 8000
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 210,210
fade_start: 0.6
fade_end: 10.0
probe_count: 3,3
algorithm: bicubic
relative_reference_index: 4

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
pin: EXP1_6
chain_count: 3
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.1
color_order: RGB

#--------------------------------------------------------------------

#####################################################################
#   EBB36 CAN
#####################################################################

[temperature_sensor can_th]
sensor_type: temperature_mcu
sensor_mcu: can_th
min_temp: 0
max_temp: 100

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Required MACROS
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#.................................................................................................................
[delayed_gcode prerun]
initial_duration: 1
gcode:
    QUERY_PROBE
    M117 Printer online.
    {% for s in range(0, 30) %}
        SET_LED LED=sb_leds INDEX=2 RED=0 GREEN=0 BLUE=0.5 WHITE=0
        SET_LED LED=sb_leds INDEX=3 RED=0 GREEN=0 BLUE=0 WHITE=0.5
        G4 P100
        SET_LED LED=sb_leds INDEX=2 RED=0 GREEN=0 BLUE=0 WHITE=0.5
        SET_LED LED=sb_leds INDEX=3 RED=0 GREEN=0 BLUE=0.5 WHITE=0
        G4 P50
    {% endfor %}
    SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro configvars"].pressureadvance|float} SMOOTH_TIME={printer["gcode_macro configvars"].pressureadvancest|float}
        SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0.6 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0.6 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0.6 INDEX=3
        SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0.6 WHITE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0 WHITE=0.8 INDEX=2 TRANSMIT=0
        SET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0 WHITE=0.8 INDEX=3



#.................................................................................................................
# M401 - Deploy Euclid Probe
[gcode_macro M401]
gcode:
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% else %}
        M118 ?!Probe is already attached.
    {% endif %}



#.................................................................................................................
# M402 - Stow Euclid Probe
[gcode_macro M402]
gcode:
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}



#.................................................................................................................
# Euclid probe safety checks block

[gcode_macro _do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
        {action_raise_error("ERROR: probe still deployed - remove and return to dock.")}
    {% else %}
        M118 Euclid Probe has been stowed.  
    {% endif %}	

[gcode_macro _error_if_probe_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
        {action_raise_error("ERROR: probe unsuccessfully deployed.")}
    {% else %}
        M118 Euclid Probe has been attached.
    {% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_not_deployed



#.................................................................................................................
[gcode_macro _PROBE_DEPLOY]
gcode:
    G90
    G0 Z{printer["gcode_macro configvars"].euclidsafez|float} F800
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidapproachy|float} F3500
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    G0 X{printer["gcode_macro configvars"].euclidswipex|float} Y{printer["gcode_macro configvars"].euclidy|float} F3500
    _error_if_probe_not_deployed ; Verify probe attached



#.................................................................................................................
[gcode_macro _PROBE_STOW]
gcode:
    G90
    G0 X{printer["gcode_macro configvars"].euclidswipex|float} Y{printer["gcode_macro configvars"].euclidstowy|float} F3500
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidstowy|float} F1000
    G0 X{printer["gcode_macro configvars"].euclidx|float} Y{printer["gcode_macro configvars"].euclidapproachy|float} F3500
    _error_if_probe_deployed ; Verify probe detached



#.................................................................................................................
[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    Z_TILT_ADJUST_ORIGINIAL
    M402



#.................................................................................................................
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    BED_MESH_CALIBRATE_ORIGINIAL
    M402



#.................................................................................................................
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% endif %}
    Z_TILT_ADJUST_ORIGINIAL
    G28
    M118 Stowing Euclid Probe.
    _PROBE_STOW
    QUERY_PROBE



#.................................................................................................................
[gcode_macro G3201]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set MeshToApply = printer["gcode_macro configvars"].meshtoapply|default() %}
    BED_MESH_CLEAR
    G28
    {% if MeshToApply == "INSITU" %}
        _INSITUMESH
    {% else %}
		QUERY_PROBE
		{% if printer.probe.last_query %}
			M118 Fetching Euclid Probe.
			_PROBE_DEPLOY
			#G28 Z
		{% endif %}
		Z_TILT_ADJUST_ORIGINIAL
		{% if printer["gcode_macro configvars"].doapplymesh|default() == true and MeshToApply != "NONE" %}
			BED_MESH_PROFILE LOAD={MeshToApply}
			M118 Applying {MeshToApply} mesh prior to sampling.
		{% else %}
			M118 Not applying {MeshToApply} mesh prior to sampling.
		{% endif %}
    {% endif %}
    G28 Z
    G90
    G0 X{X_MID} Y{Y_MID} F3500
    G91  
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE1

[gcode_macro _CHECK_PROBE1]
gcode:
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{(ProbeBB/2)} Y-{(ProbeBB/2)} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE2 PASS={PROBE_PASS}

[gcode_macro _CHECK_PROBE2]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE3 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE3]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 Y{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE4 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE4]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    {% set ProbeBB = printer["gcode_macro configvars"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{ProbeBB} F2500
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries=3 sample_retract_dist={ZRetract}
    _CHECK_PROBE5 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE5]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro configvars"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro configvars"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro configvars"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro configvars"].zproberetract|float %}
    G90
    G0 Z25 F3500
    _CHECK_PROBE6 PASS={(PROBE_PASS + PASS)/5}

[gcode_macro _CHECK_PROBE6]
gcode:
    {% set ZP_CAL = printer["gcode_macro configvars"].euclidzcompensation|float %}
    {% set ZAbortTolerance = printer["gcode_macro configvars"].zprobeaborttolerance|float %}
    {% set MeshToApply = printer["gcode_macro configvars"].meshtoapply|default() %}
    {% set DoApplyMesh = printer["gcode_macro configvars"].doapplymesh|int %}
    {% set PASS = params.PASS|float %}
    {% set Z_POS = printer.toolhead.position.z|float %}
    {% set Z_OFFSET = PASS - ZP_CAL|float %}
    {% set NEW_CURRENT_Z = (Z_POS - Z_OFFSET) %}
    M118 Current Average is: {PASS}
    M118 Z-Probe calibration is: {ZP_CAL}
    M118 Offset: {Z_OFFSET}
    {% if Z_OFFSET|abs > ZAbortTolerance %}
        M118 ! ! !  Z-OFFSET is > {ZAbortTolerance}mm, check nozzle cleanliness and printer  ! ! !
        M118 Not applying calculated offset to Z.
        PAUSE
      {% else %}
    M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
    SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
    G4 P1000
    M118 Moving nozzle to newly adjusted Z25.
    G0 Z25 F3500
    G4 P1000
      {% endif %}
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}
    {% if printer["gcode_macro configvars"].doapplymesh|default() == false and MeshToApply != "INSITU" and MeshToApply != "NONE" %}
        BED_MESH_PROFILE LOAD={MeshToApply}
        M118 Applied {MeshToApply} mesh post sampling.
    {% endif %}



#.................................................................................................................
[gcode_macro _PARK_TOOLHEAD]
gcode:
    {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}  
    {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
    {% set Z_POS = printer.toolhead.position.z + 10 %}
    M118 Parking toolhead.
    G90
    # park nozzle at top (at least 75% or Z max or Z + 10) front-right but allow room for hotend fan to pull air
    G0 X{X_MAX} Y20 Z{ [(Z_MAX*0.75), [Z_POS, Z_MAX]|min]|max } F3600 



#.................................................................................................................
[gcode_macro CURRENT_HIGH]
description: Raises stepper current for printing routine.
gcode:
    M117 Increased motor currents.
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro configvars"].printcurrentxy|float}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro configvars"].printcurrentxy|float}
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro configvars"].printcurrentz|float}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer["gcode_macro configvars"].printcurrentz|float}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer["gcode_macro configvars"].printcurrentz|float}



#.................................................................................................................
[gcode_macro CURRENT_NORMAL]
description: Lowers stepper current for NON-printing routines, as set in [tmc2209 stepper_XX] above.
gcode:
    M117 Decreased motor currents.
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={ printer.configfile.config["tmc2209 stepper_x"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={ printer.configfile.config["tmc2209 stepper_y"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={ printer.configfile.config["tmc2209 stepper_z"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={ printer.configfile.config["tmc2209 stepper_z1"]["run_current"] }
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={ printer.configfile.config["tmc2209 stepper_z2"]["run_current"] }



#.................................................................................................................
[gcode_macro _HEAT_WAIT]
gcode:
    {% set MINUTES = params.MINUTES|default(12)|int %}
    {% for i in range(0, MINUTES) %}
        M117 Warming... {MINUTES-i} minute remaining.
        {% for s in range(0, 60) %}
            SET_LED LED=sb_leds INDEX=2 RED=.5 GREEN=0 BLUE=0
            SET_LED LED=sb_leds INDEX=3 RED=0 GREEN=0 BLUE=.5
            G4 P500
            SET_LED LED=sb_leds INDEX=3 RED=0 GREEN=0 BLUE=.5
            SET_LED LED=sb_leds INDEX=3 RED=.5 GREEN=0 BLUE=0
            G4 P500
        {% endfor %}
    {% endfor %}



#.................................................................................................................
[gcode_macro _COOL_WAIT]
gcode:
    M106 S250
    {% set MINUTES = params.MINUTES|default(1)|int %}
    {% for i in range(0, MINUTES) %}
        M117 Cooling... {MINUTES-i} minute remaining.
        {% for s in range(0, 60) %}
            SET_LED LED=sb_leds INDEX=2 RED=0 GREEN=0 BLUE=0
            SET_LED LED=sb_leds INDEX=3 RED=0 GREEN=0 BLUE=.5
            G4 P500
            SET_LED LED=sb_leds INDEX=2 RED=0 GREEN=0 BLUE=.5
            SET_LED LED=sb_leds INDEX=3 RED=0 GREEN=0 BLUE=0
            G4 P500
        {% endfor %}
    {% endfor %}
    M107



#.................................................................................................................
[gcode_macro HOTMESH]
gcode:
    CLEAR_PAUSE
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {action_respond_info("Cannot do that while printing")}
    {% else %}
        {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|float %}
        {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
        {% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
        SET_LED LED=sb_leds RED=.2 GREEN=.2 BLUE=1
        # Bring bed to full temperature, only warm hotend
        M140 S{BED_TEMP}
        M104 S{defaultWN} 
        G90 
        # Reset the G-Code Z offset
        SET_GCODE_OFFSET Z=0.0
        M117 Performing initial homing.
        {% if printer["gcode_macro configvars"].qglbeforesoakmesh|default() == true %}
            G32
            # Move the nozzle
            G1 X0 Y20 Z25 F3000
          {% else %}
            G28
            # Not moving the probe if QGL was not peroformed
        {% endif %}
        M117 Bringing bed to temperature.
        M190 S{BED_TEMP}
        _HEAT_WAIT MINUTES={printer["gcode_macro configvars"].hotmeshsoakminutes|float}
        SET_LED LED=sb_leds RED=.5 GREEN=0 BLUE=.5
        M117 Performing hot level.
        CURRENT_HIGH
        M400
        M401
        QUAD_GANTRY_LEVEL_ORIGINIAL
        G28
        M117 Performing heated bed mesh calibration.
        BED_MESH_PROFILE REMOVE=HOTMESH
        BED_MESH_CALIBRATE_ORIGINIAL
        BED_MESH_PROFILE SAVE=HOTMESH
        BED_MESH_OUTPUT PGP=1
        M118 Bed mesh calibration completed.
        TURN_OFF_HEATERS
        CURRENT_NORMAL
        M402
        _PARK_TOOLHEAD
        M18 X Y E
        SET_LED LED=sb_leds RED=.2 GREEN=.5 BLUE=.2
        M117 Finished mesh.
        SAVE_CONFIG
    {% endif %}



#.................................................................................................................
[gcode_macro _INSITUMESH]
gcode:
        {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|float %}
        {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
        {% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
        SET_LED LED=sb_leds RED=.2 GREEN=.2 BLUE=1
        # Bring bed to full temperature, only warm hotend
        M140 S{BED_TEMP}
        M104 S{defaultWN} 
        G90 
        # Reset the G-Code Z offset
        SET_GCODE_OFFSET Z=0.0
        M117 Bringing bed to temperature.
        M190 S{BED_TEMP}
        _HEAT_WAIT MINUTES={printer["gcode_macro configvars"].insitumeshsoakminutes|float}
        SET_LED LED=sb_leds RED=.5 GREEN=0 BLUE=.5
        M401
        QUAD_GANTRY_LEVEL_ORIGINIAL
        G28 Z
        BED_MESH_CALIBRATE_ORIGINIAL
        BED_MESH_PROFILE SAVE=INSITUMESH
        BED_MESH_OUTPUT PGP=1
        M118 INSITU Bed mesh calibration completed and applied.
        SET_LED LED=sb_leds RED=.2 GREEN=.5 BLUE=.2



#.................................................................................................................
[gcode_macro PRINT_START]
gcode:
    CLEAR_PAUSE
    BED_MESH_CLEAR
    SET_LED LED=sb_leds RED=.2 GREEN=.2 BLUE=1
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
    {% set defaultWN = printer["gcode_macro configvars"].defaultwarmnozzle|float %}
    {% set purgeRetract = printer["gcode_macro configvars"].purgeretract|float %}
    {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
    {% set BED_TEMP = params.BED|default(defaultTB)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(defaultTN)|float %}
    {% set NZLD = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}  
    # Bring bed to full temperature, only warm hotend
    M140 S{BED_TEMP}
    M104 S{defaultWN}
    G90
    # Reset the G-Code Z offset
    SET_GCODE_OFFSET Z=0.0
    M117 Performing initial homing.
        {% if printer["gcode_macro configvars"].qglbeforesoakprint|default() == true %}
            G32
            # Move the nozzle
            G1 X0 Y20 Z25 F3000
          {% else %}
            G28
            # Not moving the probe if QGL was not peroformed
        {% endif %}
    M117 Bringing bed to temperature.
    SET_LED LED=sb_leds INDEX=3 RED=1 GREEN=0 BLUE=0
    SET_LED LED=sb_leds INDEX=2 RED=1 GREEN=0 BLUE=0
    M190 S{BED_TEMP}
    _HEAT_WAIT MINUTES={printer["gcode_macro configvars"].preprintsoakminutes|float}
    SET_LED LED=sb_leds RED=.5 GREEN=0 BLUE=.5
    M117 Performing hot level.
    CURRENT_HIGH
    M400
    G3201
    M104 S{EXTRUDER_TEMP}
    G1 X0 Y20 F5000.0
    G1 Z0.5
    M117 Bringing nozzle to temperature.
    SET_LED LED=sb_leds INDEX=3 RED=1 GREEN=0 BLUE=0
    SET_LED LED=sb_leds INDEX=3 RED=1 GREEN=0 BLUE=0
    M109 S{EXTRUDER_TEMP}
    M117 Purging the extruder.
    SET_LED LED=sb_leds RED=0.5 GREEN=0 BLUE=0.5
    # Purge line start
    G1 X0 Y19.8 Z0.3 F1500.0
    G1 E{(12.5 * NZLD)} F3600
    M400    
    G1 X0 Y0 Z0.3 F1500.0
    G1 X130 Y0.0 Z0.3 F1500.0 E{(37.5 * NZLD)}
    G1 X130 Y0.3 Z0.3 F5000.0
    G1 X20 Y0.3 Z0.3 F1500.0 E{(65.0 * NZLD)}
    M400
    G92 E0
    # Purge line completed, now retract is defined
    G1 E-{purgeRetract} F2000
    G1 Z5.0 F3000
    M106 S255
    G4 P3000
    G1 X5 F18000
    G1 X35 F18000
    M106 S0
    #G1 X{X_MID} Y{Y_MID} F4000
    M117 Printing gcode file.
    SET_LED LED=sb_leds INDEX=1 RED=0 GREEN=0 BLUE=0.5 WHITE=0
    SET_LED LED=sb_leds INDEX=2 RED=0 GREEN=0 BLUE=0 WHITE=0.8
    SET_LED LED=sb_leds INDEX=3 RED=0 GREEN=0 BLUE=0 WHITE=0.8



#.................................................................................................................
[gcode_macro PRINT_END]
# Use PRINT_END for the slicer ending script
gcode:
    {% set EndRetract = printer["gcode_macro configvars"].endretract|float %}
    {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}  
    {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
    {% set Z_POS = printer.toolhead.position.z + 10 %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-{EndRetract} F3600        ; retract filament
    TURN_OFF_HEATERS
    CURRENT_NORMAL
    G91
    G0 Z5
    G90
    M400
    _COOL_WAIT MINUTES={printer["gcode_macro configvars"].postprintcool|float}
    _PARK_TOOLHEAD
    M18 X Y E
    M107                           ; turn off fan
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    #_COOL_WAIT MINUTES={printer["gcode_macro configvars"].postprintparkcool|float}
    SET_LED LED=sb_leds RED=.2 GREEN=.5 BLUE=.2
    M117 Finished printing, check nozzle clear.
    M118 Finished printing, check nozzle clear.



#.................................................................................................................
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    {% set x = params.X|default(10) %}        #edit to your park position
    {% set y = params.Y|default(20) %}       #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{e} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
        G1 Z{z_safe}
        G90
        G1 X{x} Y{y} F6000
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}



#.................................................................................................................
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    {% set e = params.E|default(1) %} #edit to your retract length
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}



#.................................................................................................................
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set EndRetract = printer["gcode_macro configvars"].endretract|float %}
    {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
    {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
    {% set Z_POS = printer.toolhead.position.z + 10 %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-{EndRetract} F3600        ; retract filament
    CLEAR_PAUSE
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    CURRENT_NORMAL
    M106 S250
    G90
    _PARK_TOOLHEAD
    M18 X Y E
    M107                           ; turn off fan
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    _COOL_WAIT MINUTES={printer["gcode_macro configvars"].postprintparkcool|float}
    SET_LED LED=sb_leds RED=.2 GREEN=.5 BLUE=.2
    M117 Cancelled print, check nozzle clear.
    M118 Cancelled print, check nozzle clear.
    


#.................................................................................................................
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
           SAVE_GCODE_STATE NAME=HLF_state
            M83                       ; relative positioning on extruder    
            G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament  
            G0 E50 F400               ; prime extruder
            G0 E50 F400               ; prime extruder
            G0 E50 F200               ; prime extruder
            G1 E-0.5 F1800            ; .5mm retraction
            G92 E0                    ; reset extruder
            M400
            RESTORE_GCODE_STATE NAME=HLF_state
        {% else %}
            {action_respond_info("Pause print first.")}
        {% endif %}
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M117 Performing required homing.
            G28
        {% endif %}
        {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
        {% set TEMP = params.TEMP|default(defaultTN)|float %}
        M117 Heating nozzle to LOAD filamnet.
        G90                       ; absolute positioning
        G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament  
        M109 S{TEMP}              ; set hotend temperature and wait
        M83                       ; relative positioning on extruder    
        G0 E50 F400               ; prime extruder
        G0 E50 F400               ; prime extruder
        G0 E50 F200               ; prime extruder
        G1 E-0.5 F1800            ; .5mm retraction
        G92 E0                    ; reset extruder
        M400
        _PARK_TOOLHEAD
        M18 X Y E
        TURN_OFF_HEATERS
        M117 Finished filament load.
    {% endif %}



#.................................................................................................................
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {% if printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused %}
            SAVE_GCODE_STATE NAME=HUF_state
            M83                       ; relative positioning on extruder    
            G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament  
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G0 E-50 F1000             ; retract additional filament to move out of melt zone
            G92 E0                    ; reset extruder
            M400
            RESTORE_GCODE_STATE NAME=HUF_state
        {% else %}
            {action_respond_info("Pause print first.")}
        {% endif %}
    {% else %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M117 Performing required homing.
            G28
        {% endif %}
        {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
        {% set TEMP = params.TEMP|default(defaultTN)|float %}
        M117 Heating nozzle to UNLOAD filamnet.
        G90                       ; absolute positioning
        G0 X{X_MID} Y20 F3500     ; move to area where can easily load filament    
        M109 S{TEMP}              ; set hotend temperature and wait    
        M83                       ; relative positioning on extruder
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G0 E-50 F1000             ; retract additional filament to move out of melt zone
        G92 E0                    ; reset extruder
        M400
        _PARK_TOOLHEAD
        M18 X Y E
        TURN_OFF_HEATERS
        M117 Finished filament unload.
    {% endif %}



#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#  Additional MACROS, creature comforts / non-essential but helpful
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#.................................................................................................................
[gcode_macro GO_TO_CENTER]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    M118 Moving to center X:{X_MID} Y:{Y_MID}
    G90                           ; Absolute positioning
    G0 X{X_MID} Y{Y_MID} F18000   ; Go to center of bed

#.................................................................................................................
[gcode_macro NZL_PID]
# Usage: NZL_PID BED_TEMP=95 NZL_TEMP=238
gcode:
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {action_respond_info("Cannot do that while printing")}
    {% else %}
        {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
        {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
        {% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
        {% set NZL_TEMP = params.NZL_TEMP|default(defaultTN)|float %}
        {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
        {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
        {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
        {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
        SET_LED LED=sb_leds RED=.5 GREEN=.5 BLUE=0
        G90
        M117 Performing initial homing.
        G32
        G1 Z5 Y{Y_MID} X{X_MID} F3000
        M117 Bringing bed to temperature.
        M190 S{BED_TEMP}
        _HEAT_WAIT MINUTES=12
        SET_LED LED=sb_leds RED=.5 GREEN=.5 BLUE=0
        M106 S64
        M117 Starting PID calibration.
        PID_CALIBRATE HEATER=extruder TARGET={NZL_TEMP}
        M117 Finished PID calibration.
        TURN_OFF_HEATERS
        CURRENT_NORMAL
        G90
        _PARK_TOOLHEAD
        M18 X Y E
        SET_LED LED=sb_leds RED=.2 GREEN=.5 BLUE=.2
        _COOL_WAIT MINUTES={printer["gcode_macro configvars"].postprintparkcool|float}
        SAVE_CONFIG
    {% endif %}



#.................................................................................................................
[gcode_macro BED_PID]
# Usage: BED_PID BED_TEMP=95
gcode:
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {action_respond_info("Cannot do that while printing")}
    {% else %}
        {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
        {% set BED_TEMP = params.BED_TEMP|default(defaultTB)|float %}
        {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
        {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
        {% set Z_MAX = printer.configfile.config["stepper_z"]["position_max"]|float -1 %}
        {% set X_MAX = printer.configfile.config["stepper_x"]["position_max"]|float -1 %}
        SET_LED LED=sb_leds RED=.5 GREEN=.5 BLUE=0
        G90
        M117 Performing initial homing.
        G32
        G1 Z5 Y{Y_MID} X{X_MID} F3000
        M106 S64
        M117 Starting PID calibration.
        PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
        M117 Finished PID calibration. 
        TURN_OFF_HEATERS
        CURRENT_NORMAL
        _PARK_TOOLHEAD
        M18 X Y E
        SET_LED LED=sb_leds RED=.2 GREEN=.5 BLUE=.2
        _COOL_WAIT MINUTES=1
        SAVE_CONFIG
    {% endif %}



#.................................................................................................................
[gcode_macro PA_CAL]
description: Tune Pressure Advance
gcode:
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {action_respond_info("Cannot do that while printing")}
    {% else %}
        {% set defaultTN = printer["gcode_macro configvars"].defaulttempnozzle|float %}
        {% set defaultTB = printer["gcode_macro configvars"].defaulttempbed|float %}
        {% set BED = params.BED|default(defaultTB)|float %}
        {% set EXTRUDER = params.EXTRUDER|default(defaultTN)|float %}
        {% set PA_START = params.PA_START|default(0.0)|float %}
        {% set PA_STEP = params.PA_STEP|default(0.005)|float %}
        {% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
        {% set NZL = params.NZL|default(NZL_CFG)|float %}
        {% set E20 = (0.1147475 * NZL) * 20|float %}
        {% set E40 = (0.1147475 * NZL) * 40|float %}
        {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
        {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
        PRINT_START BED_TEMP={BED} EXTRUDER_TEMP={EXTRUDER}
        G21 ; Millimeter units
        G90 ; Absolute XYZ
        M83 ; Relative E
        SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
        G92 E0
        M106 S0 
        G1 X{(X_MID-40)} Y{(Y_MID-65)} F30000          ; move to start position
        G1 Z0.25 F300                                  ; move to layer height
        G1 E0.75 F1800                                 ; un-retract
        G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300     ; print line part one
        G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F9000    ; print line part two
        G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300     ; print line part three
        G1 E-0.75 F1800                                ; retract
        G1 Z1 F300                                     ; Move above layer height  
        {% for i in range(0, 20) %}
            SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)} ; set Pressure Advance
            M117 Testing Pressure Advance at: {PA_START + (i * PA_STEP)}
            G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000           ; move to start position
            G1 Z0.25 F300                                         ; move to layer height
            G1 E0.75 F1800                                        ; un-retract
            G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300      ; print line part one
            G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000     ; print line part two
            G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300      ; print line part three
            G1 E-0.75 F1800                                       ; retract
            G1 Z1 F300                                            ; Move above layer height  
        {% endfor %}
        M117 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
        M118 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
        PRINT_END
    {% endif %}


#.................................................................................................................
[gcode_macro PREHEAT]
description: Preheat printer for ABS/ASA
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 54.400
#*# pid_ki = 2.418
#*# pid_kd = 305.998
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 28.687
#*# pid_ki = 3.608
#*# pid_kd = 57.015
#*#
#*# [stepper_z]
#*# position_endstop = 0.706
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 61.8
#*# shaper_type_y = 3hump_ei
#*# shaper_freq_y = 85.0
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.015625, -0.005625, -0.006250
#*# 	0.015625, 0.000000, 0.020625
#*# 	-0.006875, -0.036875, -0.053750
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 210.0
#*# min_y = 40.0
#*# max_y = 210.0
#*#
#*# [bed_mesh HOTMESH]
#*# version = 1
#*# points =
#*# 	-0.015625, -0.005625, -0.006250
#*# 	0.015625, 0.000000, 0.020625
#*# 	-0.006875, -0.036875, -0.053750
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 210.0
#*# min_y = 40.0
#*# max_y = 210.0
